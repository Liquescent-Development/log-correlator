# DevContainer Configuration Options
# Copy this file to .env in your project root and customize as needed

# Timezone Configuration
# Set your timezone (e.g., America/Phoenix, America/New_York, Europe/London)
# To find your timezone: ls /usr/share/zoneinfo/
# If not set, defaults to UTC
TZ=America/Phoenix

# Git Configuration Mounting
# Set to "true" to use your host's git config and SSH keys
# Set to "false" (default) for an isolated container environment
# 
# When false: Run /usr/local/bin/create-limited-git-setup.sh after container starts
# When true: Your .gitconfig and .ssh are symlinked from host
#
# To enable: export MOUNT_HOST_GIT_CONFIG=true before opening in VS Code
MOUNT_HOST_GIT_CONFIG=false

# ============================================================================
# 1PASSWORD CLI CONFIGURATION
# ============================================================================
# The 1Password CLI is pre-installed in the container. To authenticate it,
# you need to provide either a Service Account token or Connect Server credentials.

# Option 1: Service Account Token (Recommended for DevContainers)
# ---------------------------------------------------------------------------
# Service accounts provide secure, scoped access without requiring interactive signin.
#
# To create a service account on your host machine:
#   1. Install 1Password CLI: https://developer.1password.com/docs/cli/get-started
#   2. Sign in to your account: op signin
#   3. Create a service account:
#      op service-account create "devcontainer-$(basename $(pwd))" --expires-in 30d
#   4. Copy the token (starts with 'ops_') and paste it below
#
# For vault-specific access (more secure):
#   op service-account create "my-dev" --expires-in 30d --vault Development:read_items
#
# The token will be securely passed to the container for CLI authentication.
OP_SERVICE_ACCOUNT_TOKEN=

# Option 2: 1Password Connect Server (For Teams/Enterprise)
# ---------------------------------------------------------------------------
# Connect Server provides centralized access management for teams.
# Contact your IT admin for these values if using Connect Server.
#
# Server URL (e.g., https://connect.company.com)
OP_CONNECT_HOST=
# Connect token for authentication
OP_CONNECT_TOKEN=

# ============================================================================
# CUSTOM DOMAIN CONFIGURATION
# ============================================================================
# Two ways to allow custom domains beyond the built-in ones (GitHub, npm, Anthropic):
#
# 1. CUSTOM_ALLOWED_DOMAINS (below) - Personal/temporary domains from .env
#    - Stored in your .devcontainer/.env file (not committed to repo)
#    - For personal/local services (e.g., local test servers, personal APIs)
#    - Comma-separated list of domains (without https://)
#    - Supports: domain names, IP addresses, and CIDR ranges
#
# 2. allowed-domains.txt file - Project-wide domains
#    - Create file in .devcontainer/ folder (committed to repo)
#    - For team-shared domains (e.g., company APIs, private registries)
#    - One domain/IP per line, supports comments with #
#
# Example: CUSTOM_ALLOWED_DOMAINS=api.mycompany.com,staging.myapp.io,192.168.1.100
CUSTOM_ALLOWED_DOMAINS=

# ============================================================================
# SOCKS5 PROXY CONFIGURATION
# ============================================================================
# Configure access to a SOCKS5 proxy for routing traffic through a VPN or proxy server
# This is useful for accessing resources behind a corporate firewall or VPN

# Enable/disable SOCKS5 proxy access (true/false)
SOCKS5_ENABLED=true

# SOCKS5 proxy host (can be hostname or IP address)
# Default: host.docker.internal (your host machine)
# Examples: proxy.company.com, 192.168.1.100, host.docker.internal
SOCKS5_HOST=host.docker.internal

# SOCKS5 proxy port
SOCKS5_PORT=1080

# To use the proxy in the container:
# curl --socks5 ${SOCKS5_HOST}:${SOCKS5_PORT} https://example.com
# git config --global http.proxy socks5://${SOCKS5_HOST}:${SOCKS5_PORT}