name: Publish to npm

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v0.0.1, v1.2.3
  workflow_dispatch:  # Allow manual trigger from GitHub UI
    inputs:
      version:
        description: 'Version to publish (e.g., 0.0.1)'
        required: true
        type: string
      tag:
        description: 'npm tag (latest, beta, next)'
        required: true
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - next
          - alpha

jobs:
  publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Need write permission to create releases
      packages: write  # For GitHub Packages
      id-token: write  # For npm provenance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Verify version consistency
        run: |
          # Extract version from tag or input
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          echo "Publishing version: $VERSION"
          
          # Verify all packages have this version
          for pkg in packages/*/package.json packages/adapters/*/package.json; do
            if [ -f "$pkg" ]; then
              PKG_VERSION=$(node -p "require('./$pkg').version")
              PKG_NAME=$(node -p "require('./$pkg').name")
              
              if [ "$PKG_VERSION" != "$VERSION" ]; then
                echo "❌ Version mismatch in $PKG_NAME: expected $VERSION, found $PKG_VERSION"
                echo "Please update all package versions to $VERSION before tagging"
                exit 1
              fi
              
              echo "✅ $PKG_NAME: $PKG_VERSION"
            fi
          done
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build all packages
        run: npm run build
      
      # Skip tests during publish - they've already passed in PR checks
      # Tests would fail here because packages reference each other with file:
      # but haven't been published yet
      
      - name: Run linter
        run: npm run lint
      
      - name: Generate changelog
        run: |
          node tools/changelog.js --unreleased > RELEASE_NOTES.md
          cat RELEASE_NOTES.md
      
      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=\${NODE_AUTH_TOKEN}" > ~/.npmrc
          echo "@liquescent:registry=https://registry.npmjs.org/" >> ~/.npmrc
          npm whoami
          # Verify we have access to publish to the @liquescent scope
          npm access ls-packages 2>/dev/null || echo "First time publishing to @liquescent scope"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Prepare packages for npm publish
        run: |
          # Get version from tag or input
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          echo "Preparing packages for version $VERSION"
          
          # Create temporary directory for publishing
          mkdir -p temp-publish
          
          # Function to prepare a package for publishing
          prepare_package() {
            local src_dir=$1
            local pkg_name=$2
            
            # Copy package to temp directory
            cp -r "$src_dir" "temp-publish/$pkg_name"
            
            # Update package.json with actual version dependencies
            cd "temp-publish/$pkg_name"
            
            # Replace file: references with version references
            if [ -f package.json ]; then
              # Use Node.js to properly update the JSON
              node -e "
                const fs = require('fs');
                const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
                
                if (pkg.dependencies) {
                  // Replace file: references with version references
                  if (pkg.dependencies['@liquescent/log-correlator-core']) {
                    if (pkg.dependencies['@liquescent/log-correlator-core'].startsWith('file:')) {
                      pkg.dependencies['@liquescent/log-correlator-core'] = '$VERSION';
                    }
                  }
                  if (pkg.dependencies['@liquescent/log-correlator-query-parser']) {
                    if (pkg.dependencies['@liquescent/log-correlator-query-parser'].startsWith('file:')) {
                      pkg.dependencies['@liquescent/log-correlator-query-parser'] = '$VERSION';
                    }
                  }
                }
                
                fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\\n');
              "
              
              echo "Prepared $pkg_name for publishing"
              cat package.json | grep "@liquescent" || true
            fi
            
            cd ../..
          }
          
          # Prepare all packages
          prepare_package "packages/query-parser" "query-parser"
          prepare_package "packages/core" "core"
          prepare_package "packages/adapters/loki" "loki"
          prepare_package "packages/adapters/graylog" "graylog"
          prepare_package "packages/adapters/promql" "promql"
      
      - name: Publish packages
        run: |
          # Determine tag
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            # Use 'next' tag for pre-release versions (0.x.x)
            if [[ "$VERSION" == 0.* ]]; then
              TAG="next"
            else
              TAG="latest"
            fi
          else
            TAG="${{ github.event.inputs.tag }}"
          fi
          
          echo "Publishing with tag: $TAG"
          
          # Publish from temp directory in dependency order
          # Use set -e to stop on first error
          set -e
          
          # 1. Query parser (no internal deps)
          echo "Publishing @liquescent/log-correlator-query-parser..."
          cd temp-publish/query-parser && npm publish --access public --tag $TAG && cd ../..
          
          # 2. Core (depends on query-parser)
          echo "Publishing @liquescent/log-correlator-core..."
          cd temp-publish/core && npm publish --access public --tag $TAG && cd ../..
          
          # 3. Adapters (depend on core)
          echo "Publishing @liquescent/log-correlator-loki..."
          cd temp-publish/loki && npm publish --access public --tag $TAG && cd ../..
          
          echo "Publishing @liquescent/log-correlator-graylog..."
          cd temp-publish/graylog && npm publish --access public --tag $TAG && cd ../..
          
          echo "Publishing @liquescent/log-correlator-promql..."
          cd temp-publish/promql && npm publish --access public --tag $TAG && cd ../..
          
          echo "✅ All packages published successfully!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        if: github.event_name == 'push'  # Only for tag pushes
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ startsWith(github.ref, 'refs/tags/v0.') }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify success
        if: success()
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "🎉 Successfully published version $VERSION to npm!"
          echo ""
          echo "Packages published:"
          echo "- @liquescent/log-correlator-core@$VERSION"
          echo "- @liquescent/log-correlator-query-parser@$VERSION"
          echo "- @liquescent/log-correlator-loki@$VERSION"
          echo "- @liquescent/log-correlator-graylog@$VERSION"
          echo "- @liquescent/log-correlator-promql@$VERSION"
          echo ""
          echo "Install with:"
          echo "  npm install @liquescent/log-correlator-core@$VERSION"