name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (major, minor, patch, prerelease)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Install dependencies
        run: |
          npm ci
          cd tools && npm install
          
      - name: Run tests
        run: npm test
        
      - name: Build packages
        run: node tools/build.js --clean --minify
        
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Tagged release
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # Manual release
            VERSION_TYPE="${{ github.event.inputs.version }}"
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            VERSION=$(npx semver $CURRENT_VERSION -i $VERSION_TYPE)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"
          
      - name: Update versions
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Update root package.json
          npm version $VERSION --no-git-tag-version
          
          # Update all workspace packages
          for pkg in packages/*/package.json packages/adapters/*/package.json; do
            if [ -f "$pkg" ]; then
              cd $(dirname $pkg)
              npm version $VERSION --no-git-tag-version
              cd -
            fi
          done
          
      - name: Generate changelog
        run: |
          node tools/changelog.js --unreleased --output CHANGELOG.tmp.md
          
          # Prepend to existing changelog
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.tmp.md CHANGELOG.md > CHANGELOG.new.md
            mv CHANGELOG.new.md CHANGELOG.md
            rm CHANGELOG.tmp.md
          else
            mv CHANGELOG.tmp.md CHANGELOG.md
          fi
          
      - name: Commit changes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git add -A
          git commit -m "chore: release v$VERSION"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          
      - name: Push changes
        run: |
          git push origin main
          git push origin --tags
          
      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Publish all public packages
          for pkg in packages/*/package.json packages/adapters/*/package.json; do
            if [ -f "$pkg" ]; then
              dir=$(dirname $pkg)
              if ! grep -q '"private": true' $pkg; then
                echo "Publishing $(basename $dir)..."
                cd $dir
                npm publish --access public
                cd -
              fi
            fi
          done
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
          files: |
            packages/*/dist/**/*.min.js
            packages/*/dist/**/*.min.js.map
            
      - name: Publish to GitHub Packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure for GitHub Packages
          echo "@liquescent:registry=https://npm.pkg.github.com" >> ~/.npmrc
          
          # Publish all public packages to GitHub
          for pkg in packages/*/package.json packages/adapters/*/package.json; do
            if [ -f "$pkg" ]; then
              dir=$(dirname $pkg)
              if ! grep -q '"private": true' $pkg; then
                echo "Publishing $(basename $dir) to GitHub Packages..."
                cd $dir
                npm publish --registry https://npm.pkg.github.com --access public || true
                cd -
              fi
            fi
          done